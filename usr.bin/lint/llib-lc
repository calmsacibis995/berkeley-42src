/*	llib-lc	1.8	83/09/09	*/
/* LINTLIBRARY */
#include <sys/types.h>
#include <fstab.h>
#include <grp.h>
#include <sys/dir.h>
#include <nlist.h>
#include <pwd.h>
#include <setjmp.h>
#include <stdio.h>
#include <sgtty.h>
#include <signal.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/uio.h>

	/***	SECTION 2	***/
int	errno;

int	accept(s, a, l) struct sockaddr *a; int *l; { return s; }
int	access( p, m) char *p; { return 0; }
int	acct(f) char *f; { return 0;}
int	bind(s, n, l) struct sockaddr *n; { return 0; }
char	*brk(a) char *a; { return(a); }
int	chdir(s) char *s; { return(0); }
int	chmod(s, m) char *s; { return(0); }
int	chown(s, u, g) char *s; { return(0); }
int	chroot( d ) char *d; { return 0; }
int	close(f) { return(0); }
int	connect( s, n, l) struct sockaddr *n; { return 0; }
int	dup(f) { return(f); }
int	dup2( o, n) { return o; }
	execve(s, v, e) char *s, *v[], *e[]; {;}
	_exit(s) {;}
int	fcntl(f, c, a) { return (0); }
int	flock( f, o ) { return 0; }
int	fork() { return(0); }
int	fsync( f ) { return 0; }
int	fstat(f, b) struct stat *b; { return(0); }
int	ftruncate( d, l) { return 0;}
int	getdtablesize() { return 20 ; }
int	getegid() { return(1); }
int	geteuid() { return(1); }
int	getgid() { return(1); }
int	getgroups( n, g ) int *n, *g; { return 0; }
int	gethostid() { return 1; }
int	gethostname( n, l ) char *n; int *l; { return 0 ;}
int	getitimer( w, v ) struct itimerval *v; { return 0; }
int	getpagesize() { return 1; }
int	getpgrp(p) { return 1; }
int	getpid() { return(1); }
int	getppid() { return(1); }
int	getpriority( w, who) { return 1;}
int	getrlimit( res, rip) struct rlimit *rip; { return 0;}
int	getrusage( res, rip) struct rusage *rip; { return 0;}
int	getsockname(s, name, namelen) char *name; int *namelen; { return(0); }
int	getsockopt( s, level, opt, buf, len ) { return 0;}
int	gettimeofday( t, z ) struct timeval *t; struct timezone *z; { return 0;}
int	getuid() { return(1); }
int	ioctl( d, r, p) char *p; { return 0;}
int	kill(p, s) { return(0); }
int	killpg( pg, s) { return 0;}
int	link(a, b) char *a, *b; { return(0); }
int	listen( s, b ){ return 0; }
long	lseek(f, o, d) long o; { return(0); }
int	lstat(s, b) char *s; struct stat *b; { return(0); }
#ifdef notdef
int	madvise( a, l, b ) char * a; int l, b; { return 0;}
int	mmap( a, l, p, s, f, o ) char * a; off_t o; { return 0;}
int	mincore( a, l, v ) char * a; int l; char *v; { return 0; }
#endif
int	mkdir( p, m ) char *p; { return 0; }
int	mknod(n, m, a) char *n; { return(0); }
int	mount(s, n, f) char *s, *n; { return(0); }
#ifdef notdef
int	mprotect( a, l, p) char * a; { return 0;}
int	mremap( a, l, p, s, f) char * a, f; { return 0;}
int	munmap( a, l) char * a; { return 0;}
#endif
	/* VARARGS2 */
int	open(f, m, stuff) char *f; { return(0); }
int	pipe(f) int f[2]; { return(0); }
	profil(b, s, o, i) char *b; {;}
int	ptrace(r, p, a, d) { return(0); }
int	read(f, b, l) char *b; { return(l); }
int	readv( d, v, l) struct iovec *v; { return l; }
int	readlink( p, b, s ) char *p, *b; { return 1; }
	reboot( h ) {;}
int	recv( s, b, l, f ) char *b; { return l ; }
int	recvfrom( s, b, l, f, fr, fl ) char *b; struct sockaddr *fr; int *fl;
		{ return l; }
int	recvmsg( s, m, f ) struct msghdr m[]; { return 1; }
int	rename( f, t ) char *f, *t; { return 0;}
int	rmdir( p ) char *p; { return 0;}
char	*sbrk(i) { return((char *)0); }
int	select( n, r, w, e, t ) int *r, *w, *e; struct timeval *t; { return n; }
int	send( s, m, l, f )  char *m; { return l; }
int	sendto( s, m, l, f, t, tl ) char *m; struct sockaddr *t; { return l; }
int	sendmsg( s, m, l) struct msghdr m[]; { return l; }
int	setgroups( n, g) int *g; { return 0; }
int	sethostid( h ) { return 0;}
int	sethostname( n, l ) char *n; int l; { return 0 ;}
int	setitimer( w, v, ov ) struct itimerval *v, *ov; { return 0; }
int	setpgrp( g, pg) { return 0; }
int	setpriority( w, who, pri ) { return 1;}
int	setregid( r, e){ return 0; }
int	setreuid( r, e){ return 0; }
int	setrlimit( res, rip) struct rlimit *rip; { return 0;}
	/* VARARGS */
int	setsockopt( s, level, opt, buf, len ) { return 0;}
int	settimeofday( t, z ) struct timeval *t; struct timezone *z; { return 0;}
int	shutdown( s, h ){ return 0;}
int	(*signal(c, f))() int (*f)(); { return(f); }
int	(*sigvec(c, f, m))() int (*f)(); { return(f); }
int	sigblock(m) { return (m); }
int	sigsetmask(m) { return (m); }
	sigpause(m) { ; }
int	sigstack(a, on) char *a; int on; { ; }
int	socket( a, t, p) {return 1;}
int	socketpair( d, t, p, s ) int s[2]; { return 0; }
int	stat(s, b) char *s; struct stat *b; { return(0); }
#ifdef notdef
char *	stk( a ) char * a; { return a; }
char *	sstk( a ) int a; { return (char *)0; }
#endif
int	swapon( b, s ) char *b; { return 0;}
int	symlink( t, f) char *t, *f; { return 0;}
	sync(){;}
int	truncate( p, l) char *p; { return 0;}
int	umask( n ) { return n; }
int	unlink(s) char *s; { return(0); }
int	utimes( f, t ) char *f; struct timeval *t[2]; { return 0 ;}
int	vfork() { return(0); }
int	wait(s) union wait *s; { return(1); }
int	wait3( s, o, r) union wait *s; struct rusage *r; { return 1;}
int	write(f, b, l) char *b; { return(l); }
int	writev( f, v, l) struct iovec *v; { return l; }


	/***	SECTION	3	***/

	/* antique system calls and unclassified */
	abort() {;}
int	abs(i) int i; { return(i); }
int	alarm(s) unsigned s; { return(s); }
	alphasort( d1, d2) struct direct *d1, *d2; { return 0;}
char *	asctime(t) struct tm *t; { return(""); }
double	atof(s) char *s; { return(1.); }
int	atoi(s) char *s; { return 1;   }
long	atol(s) char *s; { return 1L;   }
char *	calloc(n,s) unsigned n, s; { static char c[1]; return(c); }
void	closedir( p ) DIR *p; {}
int	creat(s, m) char *s; { return(0); }
char *	crypt(k,s) char *k, *s; { return(""); }
char *	ctime(c) time_t *c;{ return(""); }
char	_ctype_[];
char *	ecvt(v, n, d, s) double v; int *d, *s; { return(""); }
	encrypt(s, i) char *s; {}
int	endfsent() { return 0; }
int	endgrent() { return 0; }
int	endpwent() { return 0; }
	/* VARARGS */
	execl(f, a) char *f, *a; {;}
	/* VARARGS */
	execle(f, a) char *f, *a; {;}
	execv(s, v) char *s, *v[]; {;}
	exit(s) {;}
char *	fcvt(v, n, d, s) double v; int *d, *s; { return(""); }
	free(p) char *p; {;}
double	frexp( v, e) double v; int *e; { return v; }
char *	gcvt(v, n, b) double v; char *b; { return(""); }
char *	getenv( n ) char *n; { return n; }
struct fstab *	getfsent() { return (struct fstab *)NULL; }
struct fstab *	getfsspec( n ) char *n; { return (struct fstab *)NULL; }
struct fstab *	getfsfile( n ) char *n; { return (struct fstab *)NULL; }
struct fstab *	getfstype( t ) char *t; { return (struct fstab *)NULL; }
struct group *	getgrent() { return (struct group *)NULL; }
struct group *	getgrgid( n ) { return (struct group *)NULL; }
struct group *	getgrnam( n ) char *n; { return (struct group *)NULL; }
char *	getlogin(){ return " "; }
char *	getpass( n ) char *n ; { return n; }
int	getpw( u, b) char *b;  { return 0; }
struct passwd *	getpwent() { return (struct passwd *)NULL; }
struct passwd *	getpwuid( n ) { return (struct passwd *)NULL; }
struct passwd *	getpwnam( n ) char *n; { return (struct passwd *)NULL; }
struct	tm *	gmtime(c) time_t *c; { return gmtime(c); }
int	gtty(f, b) struct sgttyb *b; { return(0); }
char *	index(s, c) char *s, c; { return s; }
long *	initstate( s, st, n) unsigned s; long *st; { return st; }
int	isatty(f) { return 1; }
double	ldexp( v, e) double v; { return v; }
	longjmp( e, v) jmp_buf *e; {;}
struct	tm *localtime(c) time_t *c; { return localtime(c); }
char *	malloc(n) unsigned n; {static char c; return(&c);}
double	modf( v, p ) double v, *p; { return v; }
char *	mktemp(p) char *p; { return(p);}
	monitor(l, h, b, s, n) int (*l)(), (*h)(); short *b; {}
	monstartup( l, h) int (*l)(), (*h)(); {;}
	nlist( f, n) char *f; struct nlist n[]; {;}
DIR *	opendir( f ) char *f; { return (DIR *)NULL; }
	pause() {;}
	perror(s) char *s; {}
struct direct *	readdir( p ) DIR *p; { return (struct direct *)NULL; }
	qsort( b, n, w, c ) char *b; int (*c)(); {;}
int	rand(){ return 1; }
long	random() { return 1L; }
char *	re_comp(s) char *s ; { return s; }
int	re_exec(s) char *s ; { return 1; }
char *	realloc(p, n) char *p; unsigned n; { static char c[1]; return(c);}
char *	rindex(s, c) char *s, c; { return s; }
int	scandir(d, n, s, c) char *d; struct direct *(*n[]); int (*s)(),(*c)();
		{ return 1; }
void	seekdir( p, l) DIR *p; long l; {}
int	setfsent() { return 0; }
int	setgrent() { return 0; }
int	setgid(g) { return(0); }
int	setjmp(e) jmp_buf e; { return(0); }
	setkey(k) char *k; {}
int	setpwent() { return 0; }
long *	setstate( st ) long *st; { return st; }
int	setuid(u) { return(0); }
	sleep(i) unsigned i; {}
int	srand(s){ return s; }
char *	strcat(a, b) char *a, *b; { return a; }
int	strcmp(a, b) char *a, *b; { return(1); }
char *	strcpy(a, b) char *a, *b; { return a; }
int	strlen(s) char *s; { return(1); }
char *	strncat(a, b, n) char *a, *b; { return a;}
int	strncmp(a, b, n) char *a, *b; { return(1); }
char *	strncpy(a, b, n) char *a, *b; { return a; }
int	stty(f, b) struct sgttyb *b; { return(0); }
	swab( f, t, n) char *f, *t; {;}
char *	sys_errlist[];
int	sys_nerr;
int	system(s) char *s; { return(0); }
long	tell(f) { return((long)0); }
long	telldir( p ) DIR *p; { return 1L; }
time_t	time(t) time_t *t; { return( 0 );}
char *	timezone( z, d ){}
char *	ttyname(f) { return " "; }
int	ttyslot() { return 1; }
char *	valloc(s) unsigned s; { return malloc(s); }

	/* standard I/O library */

int	fclose(f) FILE *f; {return(0);}
FILE *	fdopen(fd, m) char *m; { return(stdin);}
int	fflush(f) FILE *f; {return(0);}
int	fgetc(f)  FILE *f; {return 0; }
char *	fgets( s, l, f ) char *s; FILE *f; { return(s); }
int	_filbuf( f ) FILE *f; { return 0; }
/* the unsigned is due to putc and putchar macro expansion */
int	_flsbuf( c, f ) unsigned c; FILE *f; { return 0; }
FILE *	fopen(s,m) char *s, *m; { return(stdin); }
	/* VARARGS */
	fprintf( f, s ) FILE *f; char *s; {;}
int	fputc(c, f) char c; FILE *f; {return 0; }
	fputs(s,f) char *s; FILE *f; {;}
int	fread( p, s, n, f ) char *p; FILE *f; {return(1);}
FILE *	freopen(s, m, f) char *s, *m; FILE *f; { return(stdin); }
	/* VARARGS */
	fscanf( f, s ) FILE *f; char *s; {return(1);}
	fseek(f, o, p) FILE *f; long o; { return(0); }
long	ftell(f) FILE *f; { return(0L); }
int	fwrite( p, s, n, f ) char *p; FILE *f; {return(0);}
int	getw(f) FILE *f; { return 0;}
char *	gets( s ) char *s; { return(s); }
struct	_iobuf _iob[_NFILE];
int	pclose( f ) FILE *f; { return 0; }
FILE *	popen( c, t ) char *c, *t; { return(stdin); }
	/* VARARGS */
	printf( s ) char *s; {;}
	puts(s) char *s;{;}
int	putw(w, f) FILE *f; { return 0;}
	rewind(f) FILE *f; {;}
	/* VARARGS */
	scanf( f ) char *f; {return(1); }
	setbuf( f, b ) FILE *f; char *b; {;}
	setbuffer( f, b, s ) FILE *f; char *b; {;}
	/* VARARGS */
char *	sprintf( s, f ) char *s, *f; { return(s);}
	/* VARARGS */
	sscanf( s, f ) char *s, *f; { return(1); }
	ungetc( c, f ) FILE *f; {  return(c); }
